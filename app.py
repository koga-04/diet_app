import streamlit as st
import sqlite3
import pandas as pd
import datetime
import google.generativeai as genai
import json
from PIL import Image
import io

# =============================
# Page / Theme
# =============================
st.set_page_config(
    page_title="„Ç¶„Çß„É´„Éç„Çπ„ÉÄ„Ç§„Ç¢„É™„Éº",
    page_icon="üí™",
    layout="wide",
    initial_sidebar_state="expanded",
)

# ---- Global Styles (accessible, minimal, modern) ----
st.markdown(
    """
    <style>
  @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+JP:wght@400;500;700&display=swap');
  @import url('https://fonts.googleapis.com/css2?family=Material+Symbols+Outlined:wght@400');

  :root {
    --bg: #F7FAFC;
    --panel: #FFFFFF;
    --text: #111827;
    --muted: #6B7280;
    --border: #E5E7EB;
    --primary: #3B82F6;
    --primary-600: #2563EB;
    --primary-700: #1D4ED8;
    --warn: #EF4444;
    --radius: 12px;
  }

  html, body, [class*="st-"], [class*="css-"] {
    font-family: 'Noto Sans JP', system-ui, -apple-system, Segoe UI, Roboto, 'Helvetica Neue', Arial, 'Noto Sans', 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji', sans-serif;
    color: var(--text);
  }
  .stApp { background: var(--bg); }

  /* Ensure material icon font renders glyphs instead of raw text */
  [class^="material-icons"], [class*=" material-icons"],
  [class^="material-symbols"], [class*=" material-symbols"] {
    font-family: 'Material Symbols Outlined' !important;
    font-weight: 400; font-style: normal;
    font-variation-settings: 'FILL' 0, 'wght' 400, 'GRAD' 0, 'opsz' 24;
  }

  /* ===== Hero ===== */
  .hero { background: linear-gradient(135deg, rgba(59,130,246,.10), rgba(34,211,238,.10)); border: 1px solid var(--border); border-radius: 16px; padding: 24px 28px; margin: 8px 0 18px 0; }
  .hero-title { font-size: 28px; font-weight: 700; letter-spacing: .2px; }
  .hero-sub { color: var(--muted); margin-top: 6px; }

  /* ===== Card ===== */
  .card { background: var(--panel); border-radius: 16px; border: 1px solid var(--border); padding: 24px; box-shadow: 0 8px 28px rgba(17,24,39,0.06); margin-bottom: 18px; }

  /* ===== Buttons ===== */
  .stButton>button { border-radius: 10px; border: 1px solid transparent !important; padding: .7rem 1.1rem; font-weight: 600; background: var(--primary) !important; color: #fff !important; box-shadow:none !important; }
  .stButton>button:hover { background: var(--primary-600) !important; }
  .stButton>button:active { transform: none; }

  /* ===== Inputs: identical to Selectbox (flat) ===== */
  .stTextInput>div, .stNumberInput>div, .stDateInput>div, .stSelectbox>div, .stTextArea>div {
    background:#FFFFFF !important; border:1px solid var(--border) !important; border-radius:12px !important; box-shadow:none !important; overflow:hidden !important;
  }
  .stTextInput input, .stNumberInput input, .stDateInput input, .stSelectbox>div>div, .stTextArea textarea {
    background:#FFFFFF !important; border:none !important; border-radius:0 !important; box-shadow:none !important; color: var(--text) !important;
    caret-color: var(--primary) !important;
  }
  .stTextInput>div:focus-within, .stNumberInput>div:focus-within, .stDateInput>div:focus-within, .stSelectbox>div:focus-within, .stTextArea>div:focus-within { 
      border-color: var(--primary) !important; box-shadow:none !important; 
  }

  /* >>> DateInput: remove any dark end-cap/inner enhancers */
  .stDateInput * { background:#FFFFFF !important; border-color: var(--border) !important; box-shadow:none !important; }
  .stDateInput input { height:42px !important; padding:0 12px !important; }

  /* NumberInput steppers: readable */
  .stNumberInput [data-baseweb="button"], .stNumberInput [data-baseweb="button"] * { background: transparent !important; color: #374151 !important; fill: #374151 !important; border:none !important; }
  .stNumberInput [data-baseweb="button"]:hover { background:#F3F4F6 !important; }

  /* ===== Tabs ===== */
  .stTabs [data-baseweb="tab-list"] { gap: 18px; border-bottom: 1px solid var(--border); }
  .stTabs [data-baseweb="tab"] { font-weight: 600; color: var(--muted); }
  .stTabs [aria-selected="true"] { color: var(--primary); border-bottom: 2px solid var(--primary); }

  /* ===== Sidebar ===== */
  [data-testid="stSidebar"] { background: #FFFFFF; border-right: 1px solid var(--border); }

  /* ===== Datepicker / Popover (full light) ===== */
  [data-baseweb="popover"] { background: #FFFFFF !important; color: var(--text) !important; border: 1px solid var(--border) !important; }
  [data-baseweb="popover"] * { background:#FFFFFF !important; color: var(--text) !important; }
  [role="dialog"], [data-baseweb="datepicker"], [data-baseweb="calendar"] { background: #FFFFFF !important; color: var(--text) !important; }
  [data-baseweb="calendar"] [role="row"] [role="columnheader"],
  [data-baseweb="calendar"] [role="heading"],
  [data-baseweb="datepicker"] [class*="header"],
  [data-baseweb="datepicker"] [class*="Header"] { background:#FFFFFF !important; color:#111827 !important; }
  [data-baseweb="calendar"] [aria-selected="true"] { background: var(--primary) !important; color: #fff !important; border-radius: 8px; }
  [data-baseweb="calendar"] [aria-disabled="true"] { color: #9CA3AF !important; }

  /* ===== Sidebar collapse: hide raw text; keep button visible ===== */
  [data-testid="stSidebarNavCollapseButton"] span { visibility:hidden !important; }
  [data-testid="stSidebarNavCollapseButton"] { position:relative; width:28px !important; height:28px !important; }
  [data-testid="stSidebarNavCollapseButton"]::after { content:'‚â°'; position:absolute; inset:0; display:flex; align-items:center; justify-content:center; font-size:18px; color:#6B7280; }

  /* Data editor tweaks */
  [data-testid="stDataFrame"] header, [data-testid="stDataFrame"] thead { background: #FBFDFF; }

  code {
    background-color: #F3F4F6;
    color: #374151;
    padding: 2px 6px;
    border-radius: 4px;
    font-family: monospace;
  }
</style>
    """,
    unsafe_allow_html=True,
)

# =============================
# API Key (Gemini)
# =============================
try:
    GOOGLE_API_KEY = st.secrets["GOOGLE_API_KEY"]
    genai.configure(api_key=GOOGLE_API_KEY)
except (KeyError, FileNotFoundError):
    st.error("‚ö†Ô∏è Google API„Ç≠„Éº„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ")
    st.info("Streamlit „ÅÆ Secrets „Å´ `GOOGLE_API_KEY` „ÇíË®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
    st.stop()

# =============================
# Database (SQLite)
# =============================
DB_FILE = "diet_records.db"

def get_db_connection():
    conn = sqlite3.connect(DB_FILE)
    conn.row_factory = sqlite3.Row
    return conn


def init_db():
    conn = get_db_connection()
    c = conn.cursor()
    # È£ü‰∫ãË®òÈå≤„ÉÜ„Éº„Éñ„É´
    c.execute(
        """
        CREATE TABLE IF NOT EXISTS meals (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT NOT NULL,
            meal_type TEXT NOT NULL,
            food_name TEXT NOT NULL,
            calories REAL,
            protein REAL,
            carbohydrates REAL,
            fat REAL,
            vitamin_d REAL,
            salt REAL,
            zinc REAL,
            folic_acid REAL,
            is_favorite INTEGER NOT NULL DEFAULT 0
        )
        """
    )
    # ÈÅãÂãïË®òÈå≤„ÉÜ„Éº„Éñ„É´
    c.execute(
        """
        CREATE TABLE IF NOT EXISTS exercises (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            date TEXT NOT NULL,
            exercise_name TEXT NOT NULL,
            duration_minutes INTEGER NOT NULL
        )
        """
    )
    
    c.execute("PRAGMA table_info(meals)")
    columns = [row['name'] for row in c.fetchall()]
    if 'is_favorite' not in columns:
        c.execute("ALTER TABLE meals ADD COLUMN is_favorite INTEGER NOT NULL DEFAULT 0")

    conn.commit()
    conn.close()


# CRUD helpers for Meals

def add_record(date, meal_type, food_name, nutrients):
    conn = get_db_connection()
    c = conn.cursor()
    c.execute(
        """
        INSERT INTO meals (date, meal_type, food_name, calories, protein, carbohydrates, fat, vitamin_d, salt, zinc, folic_acid)
        VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
        """,
        (
            date.strftime("%Y-%m-%d"),
            meal_type,
            food_name,
            nutrients.get("calories"),
            nutrients.get("protein"),
            nutrients.get("carbohydrates"),
            nutrients.get("fat"),
            nutrients.get("vitaminD"),
            nutrients.get("salt"),
            nutrients.get("zinc"),
            nutrients.get("folic_acid"),
        ),
    )
    conn.commit()
    conn.close()


def get_all_records():
    conn = get_db_connection()
    df = pd.read_sql_query("SELECT * FROM meals ORDER BY date DESC, id DESC", conn)
    conn.close()
    return df


def get_records_by_period(start_date, end_date):
    conn = get_db_connection()
    query = "SELECT * FROM meals WHERE date BETWEEN ? AND ? ORDER BY date DESC, id DESC"
    df = pd.read_sql_query(
        query,
        conn,
        params=(start_date.strftime("%Y-%m-%d"), end_date.strftime("%Y-%m-%d")),
    )
    conn.close()
    return df


def delete_record(record_id):
    conn = get_db_connection()
    c = conn.cursor()
    c.execute("DELETE FROM meals WHERE id = ?", (record_id,))
    conn.commit()
    conn.close()

def get_favorite_meals():
    conn = get_db_connection()
    df = pd.read_sql_query("SELECT * FROM meals WHERE is_favorite = 1 ORDER BY food_name ASC", conn)
    conn.close()
    return df

def update_favorite_status(meal_id, is_favorite):
    conn = get_db_connection()
    c = conn.cursor()
    c.execute("UPDATE meals SET is_favorite = ? WHERE id = ?", (1 if is_favorite else 0, meal_id))
    conn.commit()
    conn.close()


# CRUD helpers for Exercises
def add_exercise_record(date, exercise_name, duration_minutes):
    conn = get_db_connection()
    c = conn.cursor()
    c.execute(
        "INSERT INTO exercises (date, exercise_name, duration_minutes) VALUES (?, ?, ?)",
        (date.strftime("%Y-%m-%d"), exercise_name, duration_minutes)
    )
    conn.commit()
    conn.close()

def get_all_exercise_records():
    conn = get_db_connection()
    df = pd.read_sql_query("SELECT * FROM exercises ORDER BY date DESC, id DESC", conn)
    conn.close()
    return df

def delete_exercise_record(record_id):
    conn = get_db_connection()
    c = conn.cursor()
    c.execute("DELETE FROM exercises WHERE id = ?", (record_id,))
    conn.commit()
    conn.close()

def get_unique_exercise_names():
    conn = get_db_connection()
    try:
        df = pd.read_sql_query("SELECT DISTINCT exercise_name FROM exercises ORDER BY exercise_name", conn)
        return df['exercise_name'].tolist()
    finally:
        conn.close()


# =============================
# Gemini helpers
# =============================

def get_advice_from_gemini(prompt: str) -> str:
    """„ÉÜ„Ç≠„Çπ„Éà„Éó„É≠„É≥„Éó„Éà„Åã„Çâ„Ç¢„Éâ„Éê„Ç§„Çπ„ÇíÁîüÊàêÔºàgemini-2.5-flashÔºâ„ÄÇ"""
    try:
        model = genai.GenerativeModel("gemini-2.5-flash")
        resp = model.generate_content(prompt)
        return (resp.text or "").strip()
    except Exception as e:
        st.error(f"„Ç¢„Éâ„Éê„Ç§„ÇπÁîüÊàê‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {e}")
        return "„Ç¢„Éâ„Éê„Ç§„Çπ„ÅÆÁîüÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ"

def analyze_image_with_gemini(image_bytes):
    """ÁîªÂÉè„ÇíËß£Êûê„Åó„ÄÅÊñôÁêÜ„Åî„Å®„ÅÆÂÜÖË®≥„Å®ÂêàË®àÂÄ§„ÇíÂê´„ÇÄJSON„ÇíËøî„Åô„ÄÇ"""
    model_candidates = ["gemini-2.5-flash", "gemini-1.5-pro-latest"]
    image_pil = Image.open(io.BytesIO(image_bytes))
    prompt = (
        """
        „ÅÇ„Å™„Åü„ÅØÊ†ÑÈ§äÁÆ°ÁêÜ„ÅÆÂ∞ÇÈñÄÂÆ∂„Åß„Åô„ÄÇ„Åì„ÅÆÈ£ü‰∫ã„ÅÆÁîªÂÉè„ÇíÂàÜÊûê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
        È£ü‰∫ã„Å´Âê´„Åæ„Çå„ÇãÊñôÁêÜ„Çí**„Åô„Åπ„Å¶**ÁâπÂÆö„Åó„ÄÅ**ÊñôÁêÜ„Åî„Å®**„Å´Ê†ÑÈ§äÁ¥†„ÇíÊé®ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
        ÁµêÊûú„ÅØÂøÖ„Åö‰ª•‰∏ã„ÅÆJSONÂΩ¢Âºè„Åß„ÄÅÊï∞ÂÄ§„ÅÆ„Åø„ÇíËøî„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇË™¨Êòé„ÇÑ```json```„ÅØ‰∏çË¶Å„Åß„Åô„ÄÇ

        {
          "summary": "È£ü‰∫ãÂÖ®‰Ωì„ÅÆÁü≠„ÅÑË¶ÅÁ¥ÑÔºà‰æãÔºöÁÑº„ÅçÈ≠öÂÆöÈ£ü„Å®„Éì„Éº„É´Ôºâ",
          "totalNutrients": { "calories": 0.0, "protein": 0.0, "carbohydrates": 0.0, "fat": 0.0, "vitaminD": 0.0, "salt": 0.0, "zinc": 0.0, "folic_acid": 0.0 },
          "dishes": [
            {
              "name": "ÊñôÁêÜÂêç1",
              "rationale": "Êé®ÂÆö„ÅÆÁ∞°Âçò„Å™Ê†πÊã†Ôºà‰æãÔºöÈÆ≠„ÅÆÂàá„ÇäË∫´80g„ÇíÂü∫Ê∫ñÔºâ",
              "nutrients": { "calories": 0.0, "protein": 0.0, "carbohydrates": 0.0, "fat": 0.0, "vitaminD": 0.0, "salt": 0.0, "zinc": 0.0, "folic_acid": 0.0 }
            }
          ]
        }
        """
    )
    last_err = None
    for model_name in model_candidates:
        try:
            model = genai.GenerativeModel(model_name)
            resp = model.generate_content([prompt, image_pil])
            txt = (resp.text or "").strip().replace("```json", "").replace("```", "")
            data = json.loads(txt)
            if isinstance(data, dict) and "dishes" in data and "totalNutrients" in data:
                return data
        except Exception as e:
            last_err = e
            continue
    st.error(f"ÁîªÂÉèÂàÜÊûê„Å´Â§±Êïó„Åó„Åæ„Åó„ÅüÔºà„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„ÇÇ‰∏çÂèØÔºâ: {last_err}")
    return None

def analyze_text_with_gemini(description: str):
    """„Éï„É™„Éº„ÉÜ„Ç≠„Çπ„Éà„ÇíËß£Êûê„Åó„ÄÅÊñôÁêÜ„Åî„Å®„ÅÆÂÜÖË®≥„Å®ÂêàË®àÂÄ§„ÇíÂê´„ÇÄJSON„ÇíËøî„Åô„ÄÇ"""
    model = genai.GenerativeModel("gemini-2.5-flash")
    prompt = (
        f"""
        „ÅÇ„Å™„Åü„ÅØÊ†ÑÈ§äÁÆ°ÁêÜ„ÅÆÂ∞ÇÈñÄÂÆ∂„Åß„Åô„ÄÇ‰ª•‰∏ã„ÅÆÈ£ü‰∫ãÂÜÖÂÆπ„ÅÆË®òËø∞„ÇíÂàÜÊûê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
        È£ü‰∫ã„Å´Âê´„Åæ„Çå„ÇãÊñôÁêÜ„Çí**„Åô„Åπ„Å¶**ÁâπÂÆö„Åó„ÄÅ**ÊñôÁêÜ„Åî„Å®**„Å´Ê†ÑÈ§äÁ¥†„ÇíÊé®ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
        ÁµêÊûú„ÅØÂøÖ„Åö‰ª•‰∏ã„ÅÆJSONÂΩ¢Âºè„Åß„ÄÅÊï∞ÂÄ§„ÅÆ„Åø„ÇíËøî„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇË™¨Êòé„ÇÑ```json```„ÅØ‰∏çË¶Å„Åß„Åô„ÄÇ

        È£ü‰∫ãÂÜÖÂÆπ: "{description}"

        {{
          "summary": "È£ü‰∫ãÂÖ®‰Ωì„ÅÆÁü≠„ÅÑË¶ÅÁ¥ÑÔºà‰æãÔºöÈ£≤„Åø‰ºö„Åß„ÅÆÈ£ü‰∫ãÔºâ",
          "totalNutrients": {{ "calories": 0.0, "protein": 0.0, "carbohydrates": 0.0, "fat": 0.0, "vitaminD": 0.0, "salt": 0.0, "zinc": 0.0, "folic_acid": 0.0 }},
          "dishes": [
            {{
              "name": "ÊñôÁêÜÂêç1",
              "rationale": "Êé®ÂÆö„ÅÆÁ∞°Âçò„Å™Ê†πÊã†Ôºà‰æãÔºöÁÑº„ÅçÈ≥•„Çø„É¨5Êú¨„ÇíÂü∫Ê∫ñÔºâ",
              "nutrients": {{ "calories": 0.0, "protein": 0.0, "carbohydrates": 0.0, "fat": 0.0, "vitaminD": 0.0, "salt": 0.0, "zinc": 0.0, "folic_acid": 0.0 }}
            }}
          ]
        }}
        """
    )
    try:
        resp = model.generate_content(prompt)
        txt = (resp.text or "").strip().replace("```json", "").replace("```", "")
        data = json.loads(txt)
        if isinstance(data, dict) and "dishes" in data and "totalNutrients" in data:
            return data
    except Exception as e:
        st.error(f"„ÉÜ„Ç≠„Çπ„ÉàÂàÜÊûê‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {e}")
    return None

def parse_exercise_from_text(text: str):
    """Ëá™Áî±ÂÖ•Âäõ„ÅÆÈÅãÂãïË®òÈå≤„ÇíËß£Êûê„Åó„Å¶JSON„ÇíËøî„Åô"""
    model = genai.GenerativeModel("gemini-2.5-flash")
    prompt = f"""
    ‰ª•‰∏ã„ÅÆ„ÉÜ„Ç≠„Çπ„Éà„Åã„ÇâÈÅãÂãïÂêç„Å®ÊôÇÈñìÔºàÂàÜÔºâ„ÇíÊäΩÂá∫„Åó„ÄÅJSON„ÅßËøî„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
    ÊôÇÈñì„ÅØÂøÖ„ÅöÊï¥Êï∞„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇË™¨Êòé„ÇÑ```json```„ÅØ‰∏çË¶Å„Åß„Åô„ÄÇ
    „ÉÜ„Ç≠„Çπ„Éà: "{text}"
    
    {{
      "name": "ÈÅãÂãïÂêç",
      "duration": 60
    }}
    """
    try:
        resp = model.generate_content(prompt)
        txt = (resp.text or "").strip().replace("```json", "").replace("```", "")
        data = json.loads(txt)
        if isinstance(data, dict) and "name" in data and "duration" in data:
            return data
    except Exception:
        return None

def correct_exercise_from_text(original_data: dict, correction_text: str):
    """AI„ÅåÊèêÊ°à„Åó„ÅüÈÅãÂãïË®òÈå≤„Çí„É¶„Éº„Ç∂„Éº„ÅÆÊåáÁ§∫„Åß‰øÆÊ≠£„Åô„Çã"""
    model = genai.GenerativeModel("gemini-2.5-flash")
    prompt = f"""
    ‰ª•‰∏ã„ÅÆÁèæÂú®„ÅÆÈÅãÂãïË®òÈå≤„Çí„ÄÅ„É¶„Éº„Ç∂„Éº„ÅÆ‰øÆÊ≠£ÊåáÁ§∫„Å´Âæì„Å£„Å¶‰øÆÊ≠£„Åó„ÄÅÊñ∞„Åó„ÅÑJSON„ÇíËøî„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
    ÊôÇÈñì„ÅØÂøÖ„ÅöÊï¥Êï∞„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇË™¨Êòé„ÇÑ```json```„ÅØ‰∏çË¶Å„Åß„Åô„ÄÇ
    
    ÁèæÂú®„ÅÆË®òÈå≤: {json.dumps(original_data, ensure_ascii=False)}
    ‰øÆÊ≠£ÊåáÁ§∫: "{correction_text}"
    
    {{
      "name": "‰øÆÊ≠£Âæå„ÅÆÈÅãÂãïÂêç",
      "duration": 90
    }}
    """
    try:
        resp = model.generate_content(prompt)
        txt = (resp.text or "").strip().replace("```json", "").replace("```", "")
        data = json.loads(txt)
        if isinstance(data, dict) and "name" in data and "duration" in data:
            return data
    except Exception:
        return None

# ‚òÖÊîπ‰øÆË¶ÅÊúõ1: Ê†ÑÈ§äÁ¥†„ÅÆÂØæË©±Âûã‰øÆÊ≠£Áî®„Éò„É´„Éë„Éº
def refine_nutrition_with_ai(chat_history: list, current_data: dict):
    """Ê†ÑÈ§äÁ¥†„ÅÆÂØæË©±Â±•Ê≠¥„Å®ÁèæÂú®„ÅÆ„Éá„Éº„Çø„Åã„Çâ„ÄÅ‰øÆÊ≠£Ê°à„ÇíÁîüÊàê„Åô„Çã"""
    model = genai.GenerativeModel("gemini-2.5-flash")
    prompt = f"""
„ÅÇ„Å™„Åü„ÅØÊ†ÑÈ§äÁÆ°ÁêÜ„ÅÆÂ∞ÇÈñÄÂÆ∂„Åß„Åô„ÄÇ‰ª•‰∏ã„ÅÆÂØæË©±Â±•Ê≠¥„Å®ÁèæÂú®„ÅÆÊ†ÑÈ§äÁ¥†„Éá„Éº„Çø„ÇíÂü∫„Å´„ÄÅ„É¶„Éº„Ç∂„Éº„ÅÆÊúÄÊñ∞„ÅÆ‰øÆÊ≠£‰æùÈ†º„Å´ÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
- „É¶„Éº„Ç∂„Éº„ÅÆÊåáÁ§∫„ÅåÂ¶•ÂΩì„Åß„ÅÇ„Çå„Å∞„ÄÅÊ†ÑÈ§äÁ¥†„Éá„Éº„Çø„Çí‰øÆÊ≠£„Åó„ÅüÊñ∞„Åó„ÅÑJSON„ÇíËøî„Åó„Åæ„Åô„ÄÇ
- „É¶„Éº„Ç∂„Éº„ÅÆÊåáÁ§∫„Åå‰∏çÊ≠£Á¢∫„ÄÅ„Åæ„Åü„ÅØAI„ÅÆÂΩìÂàù„ÅÆÊé®ÂÆö„ÅåÂ¶•ÂΩì„Å†„Å®ÊÄù„Çè„Çå„ÇãÂ†¥Âêà„ÅØ„ÄÅ„Åù„ÅÆÁêÜÁî±„ÇíË™¨Êòé„Åó„ÄÅÊ†ÑÈ§äÁ¥†„Éá„Éº„Çø„ÅØ‰øÆÊ≠£„Åõ„Åö„Å´Ëøî„Åó„Åæ„Åô„ÄÇ
- ÂõûÁ≠î„ÅØÂøÖ„Åö‰ª•‰∏ã„ÅÆJSONÂΩ¢Âºè„Åß„ÄÅË™¨Êòé„ÇÑ```json```„ÅØ‰∏çË¶Å„Åß„Åô„ÄÇ

ÁèæÂú®„ÅÆÊ†ÑÈ§äÁ¥†„Éá„Éº„Çø:
{json.dumps(current_data, ensure_ascii=False, indent=2)}

ÂØæË©±Â±•Ê≠¥:
{json.dumps(chat_history, ensure_ascii=False, indent=2)}

{{
  "response_text": "„É¶„Éº„Ç∂„Éº„Å∏„ÅÆËøîÁ≠î„É°„ÉÉ„Çª„Éº„Ç∏Ôºà‰æãÔºö„ÅîÊåáÊëò„ÅÇ„Çä„Åå„Å®„ÅÜ„Åî„Åñ„ÅÑ„Åæ„Åô„ÄÇ„Åü„Çì„Å±„ÅèË≥™„Çí‰øÆÊ≠£„Åó„Åæ„Åó„Åü„ÄÇÔºâ",
  "updated_data": {{
    "summary": "È£ü‰∫ãÂÖ®‰Ωì„ÅÆÁü≠„ÅÑË¶ÅÁ¥Ñ",
    "dishes": [
      {{
        "name": "ÊñôÁêÜÂêç1",
        "rationale": "Êé®ÂÆö„ÅÆÁ∞°Âçò„Å™Ê†πÊã†",
        "nutrients": {{ "calories": 0.0, "protein": 0.0, "carbohydrates": 0.0, "fat": 0.0, "vitaminD": 0.0, "salt": 0.0, "zinc": 0.0, "folic_acid": 0.0 }}
      }}
    ]
  }}
}}
"""
    try:
        resp = model.generate_content(prompt)
        txt = (resp.text or "").strip().replace("```json", "").replace("```", "")
        data = json.loads(txt)
        if isinstance(data, dict) and "response_text" in data and "updated_data" in data:
            return data
    except Exception as e:
        st.error(f"AI„Å´„Çà„Çã‰øÆÊ≠£Ê°à„ÅÆ‰ΩúÊàê‰∏≠„Å´„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü: {e}")
    return None


# =============================
# Image-chat helpers (portion / supplement refine)
# =============================

def _scale_nutrients(nut: dict, factor: float) -> dict:
    keys = ["calories", "protein", "carbohydrates", "fat", "vitaminD", "salt", "zinc", "folic_acid"]
    out = {}
    for k in keys:
        v = (nut or {}).get(k, 0)
        try:
            out[k] = round(float(v) * float(factor), 2)
        except Exception:
            out[k] = 0.0
    return out


def _parse_fraction_jp(text: str):
    """„ÄéÂçäÂàÜ„Äè„Äé3ÂàÜ„ÅÆ1„Äè„Äé1/3„Äè„Äé1.5ÂÄç„Äè„Äé30%„Äè„Å™„Å©„Çí‰øÇÊï∞„Å´Â§âÊèõ„ÄÇ"""
    if not text:
        return None
    t = str(text).strip()
    if "ÂçäÂàÜ" in t:
        return 0.5
    # 3ÂàÜ„ÅÆ1 „Å™„Å©
    if "ÂàÜ„ÅÆ" in t:
        try:
            den, num = t.split("ÂàÜ„ÅÆ")
            den = float(den.strip()); num = float(num.strip())
            if den > 0:
                return num/den
        except Exception:
            pass
    # 1/3 „Å™„Å©
    if "/" in t:
        try:
            a, b = t.split("/")
            a = float(a.strip()); b = float(b.strip())
            if b != 0:
                return a/b
        except Exception:
            pass
    # ÂÄç
    if "ÂÄç" in t:
        try:
            return float(t.replace("ÂÄç", "").strip())
        except Exception:
            pass
    # %
    if "%" in t:
        try:
            return float(t.replace("%", "").strip())/100.0
        except Exception:
            pass
    return None


def _refine_by_note(food_name: str, nutrients: dict, note: str):
    """Ë£úË∂≥Ë™¨Êòé„ÇíÂèçÊò†„Åó„Å¶„ÄÅÊñôÁêÜÂêç/Ê†ÑÈ§äÂÄ§„ÅÆ‰∏äÊõ∏„ÅçÊ°à„ÇíËøî„Åô„ÄÇÂ§±ÊïóÊôÇ„ÅØ None„ÄÇ"""
    model = genai.GenerativeModel("gemini-2.5-flash")
    base_json = json.dumps({"foodName": food_name, "nutrients": nutrients}, ensure_ascii=False)
    schema = """
‰ª•‰∏ã„ÅÆJSON„ÅÆ„Åø„ÇíËøî„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇË™¨Êòé‰∏çË¶Å„ÄÇ„Ç≥„Éº„Éâ„Éï„Çß„É≥„Çπ‰∏çË¶Å„ÄÇ
{
  "foodName": "ÊñôÁêÜÂêçÔºàÂ§âÊõ¥‰∏çË¶Å„Å™„Çâ„Åù„ÅÆ„Åæ„ÅæÔºâ",
  "nutrients": {
    "calories": 0.0, "protein": 0.0, "carbohydrates": 0.0, "fat": 0.0,
    "vitaminD": 0.0, "salt": 0.0, "zinc": 0.0, "folic_acid": 0.0
  },
  "note": "Ë£úÊ≠£ÂÜÖÂÆπ„ÅÆË¶ÅÁ¥ÑÔºà20Â≠ó‰ª•ÂÜÖÔºâ"
}
"""
    prompt_parts = [
        "„ÅÇ„Å™„Åü„ÅØÁÆ°ÁêÜÊ†ÑÈ§äÂ£´„Åß„Åô„ÄÇ„É¶„Éº„Ç∂„Éº„ÅÆË£úË∂≥Ë™¨Êòé„ÇíÂèçÊò†„Åó„Å¶„ÄÅÁèæÂú®„ÅÆÊé®ÂÆöÂÄ§„ÇíÂøÖË¶Å„Å´Âøú„Åò„Å¶‰∏äÊõ∏„Åç„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇÂçò‰Ωç: calories(kcal), protein/carbohydrates/fat(g), vitaminD(Œºg), salt(g), zinc(mg), folic_acid(Œºg)„ÄÇÂèØËÉΩ„Å™ÁØÑÂõ≤„ÅßÂ¶•ÂΩì„Å™ÂÄ§„Å´‰∏∏„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑÔºà1„Äú2Ê°ÅÔºâ„ÄÇ",
        "ÁèæÂú®„ÅÆÊé®ÂÆö: " + base_json + "\nË£úË∂≥: " + (note or ""),
        schema,
    ]
    try:
        resp = model.generate_content(prompt_parts)
        txt = (resp.text or "").strip().replace("```json", "").replace("```", "")
        data = json.loads(txt)
        if isinstance(data, dict) and data.get("nutrients"):
            return data
    except Exception:
        return None
    return None

# =============================
# Utils: NL ‚Üí DataFrame query planner
# =============================

def _nl_to_plan(question: str) -> dict:
    """Gemini„ÅßËá™ÁÑ∂Êñá‚Üí„ÇØ„Ç®„É™JSON„Å´Â§âÊèõ„ÄÇÂ§±ÊïóÊôÇ„ÅØÁ©∫dict„ÇíËøî„Åô„ÄÇ"""
    schema = """
‰ª•‰∏ã„ÅÆJSON„Å†„Åë„ÇíËøî„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇË™¨Êòé‰∏çË¶Å„ÄÇ```„ÅØ‰ªò„Åë„Å™„ÅÑ„ÄÇ
{
  "action": "aggregate|filter|trend|top_n",
  "date_range": {"start": "YYYY-MM-DD", "end": "YYYY-MM-DD"} | null,
  "meal_types": ["ÊúùÈ£ü","ÊòºÈ£ü","Â§ïÈ£ü","ÈñìÈ£ü","„Çµ„Éó„É™","Ê∞¥ÂàÜË£úÁµ¶"] | [],
  "name_contains": "‰ªªÊÑè„ÅÆ„Ç≠„Éº„ÉØ„Éº„Éâ" | null,
  "metrics": ["calories","protein","carbohydrates","fat","vitamin_d","salt","zinc","folic_acid"],
  "agg": "sum|avg|count" | null,
  "group_by": "date|meal_type|food_name" | null,
  "top_n": Êï¥Êï∞ | null,
  "sort_by": ÊåáÊ®ôÂêç | null,
  "sort_order": "desc|asc" | null
}
"""
    try:
        model = genai.GenerativeModel("gemini-2.5-flash")
        prompt = f"""„É¶„Éº„Ç∂„Éº„ÅÆË≥™Âïè:
{question}

‰∏ä„ÅÆË≥™Âïè„Çí„ÄÅÊåáÂÆö„Çπ„Ç≠„Éº„Éû„ÅÆJSON„Å´Â§âÊèõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
{schema}
"""
        resp = model.generate_content(prompt)
        txt = resp.text.strip().replace("```json", "").replace("```", "")
        return json.loads(txt)
    except Exception:
        return {}


def _postprocess_plan(question: str, plan: dict) -> dict:
    """Ë≥™ÂïèÊñá„Åã„ÇâÁõ∏ÂØæÊó•‰ªò„ÇÑÂÜÖË®≥„É™„ÇØ„Ç®„Çπ„Éà„ÇíËß£Èáà„Åó„ÄÅË®àÁîª„ÇíË£úÊ≠£„Åô„Çã„ÄÇ"""
    pr = (plan or {}).copy()
    q = (question or "")

    # --- Áõ∏ÂØæÊó•‰ªò„ÅÆË£úÊ≠£ ---
    today = datetime.date.today()
    if any(k in q for k in ["‰ªäÊó•", "Êú¨Êó•", "today"]):
        ds = today.strftime("%Y-%m-%d")
        pr["date_range"] = {"start": ds, "end": ds}
    if any(k in q for k in ["Êò®Êó•", "„Åç„ÅÆ„ÅÜ", "yesterday"]):
        d = today - datetime.timedelta(days=1)
        ds = d.strftime("%Y-%m-%d")
        pr["date_range"] = {"start": ds, "end": ds}

    # --- "„Å©„ÅÆ/ÂÜÖË®≥/„Å©„Çå„Åè„Çâ„ÅÑ/È£üÊùê" ‚Üí È£üÂìÅÂà•„ÅÆÂÜÖË®≥„ÇíÊ±Ç„ÇÅ„Å¶„ÅÑ„Çã„Å®Ëß£Èáà ---
    if any(k in q for k in ["„Å©„ÅÆ", "ÂÜÖË®≥", "„Å©„Çå„Åè„Çâ„ÅÑ", "„Å©„Çå„Åê„Çâ„ÅÑ", "È£üÊùê"]):
        pr["action"] = "aggregate"
        pr["group_by"] = "food_name"
        pr.setdefault("agg", "sum")
        pr.setdefault("metrics", ["protein"])  # ÊòéÁ§∫„Åï„Çå„Å¶„Å™„Åë„Çå„Å∞„Çø„É≥„Éë„ÇØË≥™

    return pr


def _execute_plan(df: pd.DataFrame, plan: dict):
    """Ë®àÁîª„Å´Âæì„Å£„Å¶DataFrame„ÇíÊäΩÂá∫/ÈõÜË®à„Åó„ÄÅ(ÁµêÊûúDF, „Çµ„Éû„É™ÊñáÂ≠óÂàó)„ÇíËøî„Åô„ÄÇ"""
    if df.empty:
        return pd.DataFrame(), "Ë®òÈå≤„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ"

    work = df.copy()
    # ÂûãÊï¥ÂΩ¢
    work["date"] = pd.to_datetime(work["date"], errors="coerce")
    num_cols = ["calories", "protein", "carbohydrates", "fat", "vitamin_d", "salt", "zinc", "folic_acid"]
    for c in num_cols:
        if c in work.columns:
            work[c] = pd.to_numeric(work[c], errors="coerce")

    # „Éï„Ç£„É´„Çø
    pr = plan or {}
    dr = pr.get("date_range") or {}
    if dr.get("start"):
        start = pd.to_datetime(dr.get("start"), errors="coerce")
        work = work[work["date"] >= start]
    if dr.get("end"):
        end = pd.to_datetime(dr.get("end"), errors="coerce")
        work = work[work["date"] <= end]

    mts = pr.get("meal_types") or []
    if mts:
        work = work[work["meal_type"].isin(mts)]

    kw = pr.get("name_contains")
    if kw:
        work = work[work["food_name"].str.contains(str(kw), case=False, na=False)]

    action = (pr.get("action") or "filter").lower()
    metrics = pr.get("metrics") or ["calories"]

    if work.empty:
        return pd.DataFrame(), "Êù°‰ª∂„Å´‰∏ÄËá¥„Åô„ÇãË®òÈå≤„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ"

    if action == "filter":
        cols = ["date", "meal_type", "food_name"] + [c for c in metrics if c in work.columns]
        out = work[cols].sort_values("date", ascending=False)
        return out, f"{len(out)}‰ª∂„Éí„ÉÉ„Éà"

    if action in ("aggregate", "trend"):
        gb = pr.get("group_by")
        agg = pr.get("agg") or "sum"
        agg_map = {m: agg for m in metrics if m in work.columns}
        if gb in ("date", "meal_type", "food_name"):
            out = work.groupby(gb).agg(agg_map).reset_index()
            if gb == "date":
                out = out.sort_values("date")
            return out, f"{gb}Âà•„ÅÆ{agg}"
        else:
            out = work[metrics].agg(agg)
            out = out.to_frame(name=agg).reset_index().rename(columns={"index": "metric"})
            return out, f"ÂÖ®‰Ωì„ÅÆ{agg}"

    if action == "top_n":
        sort_by = pr.get("sort_by") or metrics[0]
        order = (pr.get("sort_order") or "desc").lower() == "desc"
        n = int(pr.get("top_n") or 5)
        cols = ["date", "meal_type", "food_name", sort_by]
        cols = [c for c in cols if c in work.columns]
        out = work.sort_values(sort_by, ascending=not order)[cols].head(n)
        return out, f"{sort_by}„ÅÆ‰∏ä‰Ωç{n}‰ª∂"

    # default
    out = work[["date", "meal_type", "food_name"] + [c for c in metrics if c in work.columns]].sort_values("date", ascending=False)
    return out, f"{len(out)}‰ª∂„Éí„ÉÉ„Éà"

# =============================
# LLM-to-SQL (Ëá™Áî±„É¢„Éº„Éâ)
# =============================

ALLOWED_COLS = {"id","date","meal_type","food_name","calories","protein","carbohydrates","fat","vitamin_d","salt","zinc","folic_acid"}


def llm_to_sql(question: str) -> dict:
    """Ëá™ÁÑ∂Êñá„Åã„ÇâÂÆâÂÖ®„Å™SQL(JSON)„ÇíÁîüÊàê„Åô„Çã„ÄÇGemini 2.5 Flash „Çí‰ΩøÁî®„ÄÇ"""
    today_jst = (datetime.datetime.utcnow() + datetime.timedelta(hours=9)).date().strftime("%Y-%m-%d")
    model = genai.GenerativeModel("gemini-2.5-flash")
    schema_tmpl = """
„ÅÇ„Å™„Åü„ÅØSQLiteÁî®„ÅÆSQL„Ç¢„Ç∑„Çπ„Çø„É≥„Éà„Åß„Åô„ÄÇÊ¨°„ÅÆÂà∂Á¥Ñ„ÇíÂøÖ„ÅöÂÆà„Å£„Å¶„Åè„Å†„Åï„ÅÑ:
- SELECTÊñá„ÅÆ„Åø„ÄÇINSERT/UPDATE/DELETE/ALTER/DROP „ÅØÁ¶ÅÊ≠¢Ôºà„Çª„Éü„Ç≥„É≠„É≥Âê´„ÇÄÔºâ„ÄÇ
- FROM „ÅØÂøÖ„Åö meals „ÅÆ„Åø„ÄÇ
- Áõ∏ÂØæÊó•‰ªòÔºà‰ªäÊó•/Êò®Êó•/ÂÖàÈÄ±„Å™„Å©Ôºâ„ÅØÊó•Êú¨ÊôÇÈñì(__TODAY__)Âü∫Ê∫ñ„ÅßÂÖ∑‰ΩìÁöÑ„Å™YYYY-MM-DD„Å´Ëß£Ê±∫„ÄÇ
- ÂèØËÉΩ„Å™„Çâ ? „Éó„É¨„Éº„Çπ„Éõ„É´„ÉÄ„Å® params „Çí‰Ωø„ÅÜ„ÄÇ
- ÁµêÊûúË°å„ÅØÊúÄÂ§ß500Ë°åÔºàLIMIT „Çí‰ªò„Åë„ÇãÔºâ„ÄÇ

„ÉÜ„Éº„Éñ„É´: meals(
  id INTEGER, date TEXT(YYYY-MM-DD), meal_type TEXT, food_name TEXT,
  calories REAL, protein REAL, carbohydrates REAL, fat REAL, vitamin_d REAL, salt REAL, zinc REAL, folic_acid REAL
)

JSON„ÅÆ„Åø„ÇíËøî„Åó„Å¶„Åè„Å†„Åï„ÅÑÔºàË™¨Êòé‰∏çË¶Å„Éª„Ç≥„Éº„Éâ„Éï„Çß„É≥„Çπ‰∏çË¶ÅÔºâ:
{
  "sql": "SELECT ... FROM meals WHERE ... LIMIT 500",
  "params": [],
  "intent": "Êó•Êú¨Ë™û„Åß„ÅÆÁ∞°Âçò„Å™Ë™¨Êòé"
}
"""
    schema = schema_tmpl.replace("__TODAY__", today_jst)
    prompt = f"""„É¶„Éº„Ç∂„ÉºË≥™Âïè: {question}

‰∏äË®ò„ÅÆÂà∂Á¥Ñ„ÅßSQL JSON„ÇíËøî„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
{schema}
"""
    resp = model.generate_content(prompt)
    txt = (resp.text or "").strip().replace("```json", "").replace("```", "")
    try:
        return json.loads(txt)
    except Exception:
        return {"sql": "", "params": [], "intent": "parse_error"}


def _safe_run_sql(sql: str, params: list):
    """ÊúÄ‰ΩéÈôê„ÅÆ„Çµ„Éã„Çø„Ç§„Ç∫„ÇíË°å„Å£„Å¶„Åã„ÇâSQL„ÇíÂÆüË°å„Åó„Å¶DataFrame„ÇíËøî„Åô„ÄÇ"""
    if not sql:
        raise ValueError("SQL„ÅåÁ©∫„Åß„Åô")
    s = sql.strip().lower()
    if not s.startswith("select"):
        raise ValueError("SELECT„ÅÆ„ÅøË®±ÂèØ")
    for bad in ["insert", "update", "delete", "drop", "alter", "attach", "pragma", ";"]:
        if bad in s:
            raise ValueError("Á¶ÅÊ≠¢„Ç≠„Éº„ÉØ„Éº„Éâ„ÇíÊ§úÂá∫„Åó„Åæ„Åó„Åü")
    if " from " not in s or "meals" not in s:
        raise ValueError("FROM „ÅØ meals „ÅÆ„ÅøË®±ÂèØ")
    if " limit " not in s:
        sql = sql.strip() + " LIMIT 500"
    conn = get_db_connection()
    try:
        df = pd.read_sql_query(sql, conn, params=params or [])
    finally:
        conn.close()
    return df

# =============================
# App
# =============================
init_db()

# --- Sidebar ---
with st.sidebar:
    st.markdown("### „É°„Éã„É•„Éº")
    menu = st.radio("ÈÅ∏Êäû", ["È£ü‰∫ãË®òÈå≤", "ÈÅãÂãïË®òÈå≤", "Áõ∏Ë´á„Åô„Çã"], index=0, label_visibility="collapsed")

# --- Dynamic Header ---
if menu == "È£ü‰∫ãË®òÈå≤":
    title = "üçΩÔ∏è È£ü‰∫ãË®òÈå≤"
    subtitle = "Êó•„ÄÖ„ÅÆÈ£ü‰∫ã„ÇÑ„Çµ„Éó„É™„ÉªÊ∞¥ÂàÜË£úÁµ¶„Çí„Ç∑„É≥„Éó„É´„Å´Ë®òÈå≤„Åó„Åæ„Åó„Çá„ÅÜ„ÄÇ"
elif menu == "ÈÅãÂãïË®òÈå≤":
    title = "üí™ ÈÅãÂãïË®òÈå≤"
    subtitle = "Êó•„ÄÖ„ÅÆÈÅãÂãï„ÇíË®òÈå≤„Åó„Å¶„ÄÅÊ¥ªÂãï„ÅÆÁøíÊÖ£„ÇíÂèØË¶ñÂåñ„Åó„Åæ„Åó„Çá„ÅÜ„ÄÇ"
else: # Áõ∏Ë´á„Åô„Çã
    title = "üí¨ AI„Å´Áõ∏Ë´á„Åô„Çã"
    subtitle = "È£ü‰∫ã„Å®ÈÅãÂãï„ÅÆË®òÈå≤„ÇíÂü∫„Å´„ÄÅAI„Åå„Éë„Éº„ÇΩ„Éä„É´„Å™„Ç¢„Éâ„Éê„Ç§„Çπ„Çí„Åó„Åæ„Åô„ÄÇ"

st.markdown(
    f"""
    <div class="hero">
      <div class="hero-title">{title}</div>
      <div class="hero-sub">{subtitle}</div>
    </div>
    """,
    unsafe_allow_html=True,
)

# --- Quick glance (today) ---
if menu != "Áõ∏Ë´á„Åô„Çã": # Áõ∏Ë´á„Éö„Éº„Ç∏„Åß„ÅØÈùûË°®Á§∫
    all_df = get_all_records()

    def _sum_today(df: pd.DataFrame):
        if df.empty:
            return {"cal": 0, "p": 0, "c": 0, "f": 0}
        today_str = datetime.date.today().strftime("%Y-%m-%d")
        t = df[df["date"] == today_str]
        t = t[t["meal_type"] != "Ê∞¥ÂàÜË£úÁµ¶"]
        return {
            "cal": float(t["calories"].fillna(0).sum()),
            "p": float(t["protein"].fillna(0).sum()),
            "c": float(t["carbohydrates"].fillna(0).sum()),
            "f": float(t["fat"].fillna(0).sum()),
        }

    sum_today = _sum_today(all_df)
    col1, col2, col3, col4 = st.columns(4)
    col1.metric("Êú¨Êó•„ÅÆ„Ç´„É≠„É™„Éº", f"{int(sum_today['cal'])} kcal")
    col2.metric("„Åü„Çì„Å±„ÅèË≥™", f"{sum_today['p']:.1f} g")
    col3.metric("ÁÇ≠Ê∞¥ÂåñÁâ©", f"{sum_today['c']:.1f} g")
    col4.metric("ËÑÇË≥™", f"{sum_today['f']:.1f} g")

# =============================
# RECORD
# =============================
if menu == "È£ü‰∫ãË®òÈå≤":
    with st.container():
        st.markdown('<div class="card">', unsafe_allow_html=True)
        st.subheader("È£ü‰∫ã„ÅÆË®òÈå≤")
        
        left, right = st.columns([1, 1])
        with left:
            meal_type = st.selectbox(
                "Ë®òÈå≤„ÅÆÁ®ÆÈ°û",
                ["ÊúùÈ£ü", "ÊòºÈ£ü", "Â§ïÈ£ü", "ÈñìÈ£ü", "„Éó„É≠„ÉÜ„Ç§„É≥", "„Çµ„Éó„É™", "Ê∞¥ÂàÜË£úÁµ¶"],
                index=0,
            )
        with right:
            record_date = st.date_input("Êó•‰ªò", datetime.date.today())
        
        if meal_type == "„Éó„É≠„ÉÜ„Ç§„É≥":
            with st.form(key="protein_form", clear_on_submit=True):
                protein_amount = st.number_input("„Åü„Çì„Å±„ÅèË≥™„ÅÆÈáè (g)", min_value=0.0, step=0.1, value=20.0, format="%.1f")
                if st.form_submit_button("„Éó„É≠„ÉÜ„Ç§„É≥„ÇíË®òÈå≤„Åô„Çã", use_container_width=True):
                    nutrients = { "protein": protein_amount, "calories": protein_amount * 4 } 
                    add_record(record_date, "„Éó„É≠„ÉÜ„Ç§„É≥", f"„Éó„É≠„ÉÜ„Ç§„É≥ {protein_amount}g", nutrients)
                    st.success(f"„Éó„É≠„ÉÜ„Ç§„É≥ {protein_amount}g „ÇíË®òÈå≤„Åó„Åæ„Åó„ÅüÔºÅ")

        elif meal_type == "„Çµ„Éó„É™":
            with st.form(key="supplement_form", clear_on_submit=True):
                supplements = {
                    "„Éû„É´„ÉÅ„Éì„Çø„Éü„É≥": { "displayName": "„Éû„É´„ÉÅ„Éì„Çø„Éü„É≥", "foodName": "„Çµ„Éó„É™: „Çπ„Éº„Éë„Éº„Éû„É´„ÉÅ„Éì„Çø„Éü„É≥&„Éü„Éç„É©„É´", "nutrients": { "calories": 5, "protein": 0.02, "carbohydrates": 0.6, "fat": 0.05, "vitaminD": 10.0, "salt": 0, "zinc": 6.0, "folic_acid": 240, }, },
                    "ËëâÈÖ∏": { "displayName": "ËëâÈÖ∏", "foodName": "„Çµ„Éó„É™: ËëâÈÖ∏", "nutrients": { "calories": 1, "protein": 0, "carbohydrates": 0.23, "fat": 0.004, "vitaminD": 0, "salt": 0, "zinc": 0, "folic_acid": 480, }, },
                    "„Éì„Çø„Éü„É≥D": { "displayName": "„Éì„Çø„Éü„É≥D", "foodName": "„Çµ„Éó„É™: „Éì„Çø„Éü„É≥D", "nutrients": { "calories": 1, "protein": 0, "carbohydrates": 0, "fat": 0.12, "vitaminD": 30.0, "salt": 0, "zinc": 0, "folic_acid": 0, }, },
                    "‰∫úÈâõ": { "displayName": "‰∫úÈâõ", "foodName": "„Çµ„Éó„É™: ‰∫úÈâõ", "nutrients": { "calories": 1, "protein": 0, "carbohydrates": 0.17, "fat": 0.005, "vitaminD": 0, "salt": 0, "zinc": 14.0, "folic_acid": 0, }, },
                }
                selected_sup = st.selectbox("„Çµ„Éó„É™„ÇíÈÅ∏Êäû", list(supplements.keys()))
                if st.form_submit_button("„Çµ„Éó„É™„ÇíË®òÈå≤„Åô„Çã", use_container_width=True):
                    sup_data = supplements[selected_sup]
                    add_record(record_date, "„Çµ„Éó„É™", sup_data["foodName"], sup_data["nutrients"])
                    st.success(f"{sup_data['displayName']}„ÇíË®òÈå≤„Åó„Åæ„Åó„ÅüÔºÅ")

        elif meal_type == "Ê∞¥ÂàÜË£úÁµ¶":
            with st.form(key="water_form", clear_on_submit=True):
                amount_ml = st.number_input("È£≤„Çì„Å†Èáè (ml)", min_value=0, step=50, value=200)
                if st.form_submit_button("Ê∞¥ÂàÜË£úÁµ¶„ÇíË®òÈå≤„Åô„Çã", use_container_width=True):
                    nutrients = { "calories": 0, "protein": 0, "carbohydrates": 0, "fat": 0, "vitaminD": 0, "salt": 0, "zinc": 0, "folic_acid": 0, }
                    add_record(record_date, "Ê∞¥ÂàÜË£úÁµ¶", f"{amount_ml} ml", nutrients)
                    st.success(f"Ê∞¥ÂàÜË£úÁµ¶ {amount_ml}ml „ÇíË®òÈå≤„Åó„Åæ„Åó„ÅüÔºÅ")

        else: 
            input_method = st.radio("Ë®òÈå≤ÊñπÊ≥ï", ["Ê†ÑÈ§äÁ¥†ÊâãÂÖ•Âäõ", "„Éï„É™„ÉºË®òËø∞ÂÖ•Âäõ", "ÁîªÂÉè„Åã„ÇâÂÖ•Âäõ"], horizontal=True)

            if input_method == "Ê†ÑÈ§äÁ¥†ÊâãÂÖ•Âäõ":
                favorite_meals_df = get_favorite_meals()
                favorite_options = {"Êñ∞Ë¶èÂÖ•Âäõ": None}
                for index, row in favorite_meals_df.iterrows():
                    favorite_options[row['food_name']] = row.to_dict()

                selected_favorite_key = st.selectbox(
                    "„ÅäÊ∞ó„Å´ÂÖ•„Çä„Åã„ÇâÈÅ∏Êäû",
                    options=list(favorite_options.keys()),
                    index=0
                )
                
                selected_favorite_data = favorite_options.get(selected_favorite_key)

                with st.form(key="text_input_form", clear_on_submit=True):
                    food_name = st.text_input("È£ü‰∫ãÂêç", value=selected_favorite_data['food_name'] if selected_favorite_data else "", placeholder="‰æãÔºâÈÆ≠„ÅÆÂ°©ÁÑº„ÅçÂÆöÈ£ü „Å™„Å©")
                    cols = st.columns(2)
                    calories = cols[0].number_input("„Ç´„É≠„É™„Éº (kcal)", value=float(selected_favorite_data['calories'] or 0.0) if selected_favorite_data else 0.0, format="%.1f")
                    protein = cols[1].number_input("„Åü„Çì„Å±„ÅèË≥™ (g)", value=float(selected_favorite_data['protein'] or 0.0) if selected_favorite_data else 0.0, format="%.1f")
                    carbohydrates = cols[0].number_input("ÁÇ≠Ê∞¥ÂåñÁâ© (g)", value=float(selected_favorite_data['carbohydrates'] or 0.0) if selected_favorite_data else 0.0, format="%.1f")
                    fat = cols[1].number_input("ËÑÇË≥™ (g)", value=float(selected_favorite_data['fat'] or 0.0) if selected_favorite_data else 0.0, format="%.1f")
                    vitamin_d = cols[0].number_input("„Éì„Çø„Éü„É≥D (Œºg)", value=float(selected_favorite_data['vitamin_d'] or 0.0) if selected_favorite_data else 0.0, format="%.1f")
                    salt = cols[1].number_input("È£üÂ°©Áõ∏ÂΩìÈáè (g)", value=float(selected_favorite_data['salt'] or 0.0) if selected_favorite_data else 0.0, format="%.1f")
                    zinc = cols[0].number_input("‰∫úÈâõ (mg)", value=float(selected_favorite_data['zinc'] or 0.0) if selected_favorite_data else 0.0, format="%.1f")

                    if st.form_submit_button("È£ü‰∫ã„ÇíË®òÈå≤„Åô„Çã", use_container_width=True, type="primary"):
                        if food_name:
                            nutrients = { "calories": calories, "protein": protein, "carbohydrates": carbohydrates, "fat": fat, "vitaminD": vitamin_d, "salt": salt, "zinc": zinc, }
                            add_record(record_date, meal_type, food_name, nutrients)
                            st.success(f"{food_name}„ÇíË®òÈå≤„Åó„Åæ„Åó„ÅüÔºÅ")
                        else:
                            st.warning("È£ü‰∫ãÂêç„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
            
            elif input_method == "„Éï„É™„ÉºË®òËø∞ÂÖ•Âäõ":
                description = st.text_area("È£ü‰∫ã„ÅÆÂÜÖÂÆπ„ÇíËá™Áî±„Å´ÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ", placeholder="‰æãÔºöÈ£≤„Åø‰ºö„Åß„ÄÅÁÑº„ÅçÈ≥•„Çí5Êú¨Ôºà„Çø„É¨Ôºâ„ÄÅ„Éì„Éº„É´„Çí2ÊùØ„ÄÅÊûùË±Ü„ÇíÈ£ü„Åπ„Åü")
                if st.button("AI„ÅßÊ†ÑÈ§äÁ¥†„ÇíÊé®ÂÆö„Åô„Çã", use_container_width=True):
                    if description.strip():
                        with st.spinner("AI„ÅåË®òËø∞ÂÜÖÂÆπ„ÇíÂàÜÊûê‰∏≠„Åß„Åô..."):
                            analysis_result = analyze_text_with_gemini(description)
                        if analysis_result:
                            st.session_state.analysis_result = analysis_result
                            # ‚òÖÊîπ‰øÆË¶ÅÊúõ1: ÂØæË©±Â±•Ê≠¥„ÇíÂàùÊúüÂåñ
                            st.session_state.nutrition_chat_history = []
                        else:
                            st.error("ÂàÜÊûê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„ÇÇ„ÅÜÂ∞ë„ÅóÂÖ∑‰ΩìÁöÑ„Å´Ë®òËø∞„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
                    else:
                        st.warning("È£ü‰∫ã„ÅÆÂÜÖÂÆπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")

            elif input_method == "ÁîªÂÉè„Åã„ÇâÂÖ•Âäõ":
                uploaded_file = st.file_uploader("È£ü‰∫ã„ÅÆÁîªÂÉè„Çí„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ", type=["jpg", "jpeg", "png"])
                if uploaded_file is not None:
                    st.image(uploaded_file, caption="„Ç¢„ÉÉ„Éó„É≠„Éº„Éâ„Åï„Çå„ÅüÁîªÂÉè", use_column_width=True)
                    if st.button("ÁîªÂÉè„ÇíÂàÜÊûê„Åô„Çã", use_container_width=True):
                        with st.spinner("AI„ÅåÁîªÂÉè„ÇíÂàÜÊûê‰∏≠„Åß„Åô..."):
                            analysis_result = analyze_image_with_gemini(uploaded_file.getvalue())
                        if analysis_result:
                            st.session_state.analysis_result = analysis_result
                            # ‚òÖÊîπ‰øÆË¶ÅÊúõ1: ÂØæË©±Â±•Ê≠¥„ÇíÂàùÊúüÂåñ
                            st.session_state.nutrition_chat_history = []
                        else:
                            st.error("ÂàÜÊûê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ„ÉÜ„Ç≠„Çπ„Éà„ÅßÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
            
            if input_method in ["„Éï„É™„ÉºË®òËø∞ÂÖ•Âäõ", "ÁîªÂÉè„Åã„ÇâÂÖ•Âäõ"] and "analysis_result" in st.session_state:
                st.info("AI„ÅÆÊé®ÂÆöÁµêÊûú„Åß„Åô„ÄÇÂÜÖÂÆπ„ÇíÁ¢∫Ë™ç„Åó„ÄÅÂøÖË¶Å„Å´Âøú„Åò„Å¶‰øÆÊ≠£„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
                result = st.session_state.analysis_result
                
                # ‚òÖÊîπ‰øÆË¶ÅÊúõ1: ÂØæË©±Â±•Ê≠¥„ÅÆË°®Á§∫
                if "nutrition_chat_history" in st.session_state:
                    for msg in st.session_state.nutrition_chat_history:
                        with st.chat_message(msg["role"]):
                            st.markdown(msg["content"])
                
                st.markdown("##### AI„Å´„Çà„ÇãÁèæÂú®„ÅÆÊé®ÂÆöÂÜÖË®≥")
                dishes_df = pd.DataFrame(result.get("dishes", []))
                if not dishes_df.empty:
                    nutrients_df = pd.json_normalize(dishes_df['nutrients'])
                    display_dishes = pd.concat([dishes_df[['name', 'rationale']], nutrients_df], axis=1)
                    st.dataframe(display_dishes.rename(columns={
                        "name": "ÊñôÁêÜÂêç", "rationale": "Êé®ÂÆöÊ†πÊã†", "calories": "cal", "protein": "P",
                        "carbohydrates": "C", "fat": "F", "vitaminD": "VitD", "salt": "Â°©ÂàÜ", "zinc": "‰∫úÈâõ"
                    }), use_container_width=True)
                
                st.divider()
                st.markdown("##### „Åì„ÅÆÂÜÖÂÆπ„ÅßÁôªÈå≤„Åó„Åæ„Åô„ÅãÔºü")
                
                col1, col2, col_spacer = st.columns([1,2,2])
                if col1.button("„ÅØ„ÅÑ„ÄÅ„Åì„ÅÆÂÜÖÂÆπ„ÅßË®òÈå≤„Åô„Çã", type="primary"):
                    dishes = result.get("dishes", [])
                    if not dishes:
                        st.warning("Ë®òÈå≤„Åô„ÇãÊñôÁêÜ„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ")
                    else:
                        recorded_dishes = []
                        with st.spinner("Ë®òÈå≤‰∏≠..."):
                            for dish in dishes:
                                add_record(record_date, meal_type, dish.get("name"), dish.get("nutrients", {}))
                                recorded_dishes.append(dish.get("name"))
                        st.success(f"{len(recorded_dishes)}‰ª∂„ÅÆÊñôÁêÜ„ÇíË®òÈå≤„Åó„Åæ„Åó„Åü: {', '.join(recorded_dishes)}")
                        
                        for key in list(st.session_state.keys()):
                            if key.startswith('analysis_') or key.startswith('nutrition_'):
                                del st.session_state[key]
                        st.rerun()

                if col2.button("‰øÆÊ≠£„ÇíÂ∏åÊúõ„Åô„Çã"):
                    st.session_state.show_nutrition_correction = True

                if st.session_state.get("show_nutrition_correction"):
                    correction_text = st.text_area("‰øÆÊ≠£ÁÇπ„ÇíËá™Áî±„Å´ÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ", placeholder="‰æãÔºöÁÑº„ÅçÈ≥•„ÅØ5Êú¨„Åò„ÇÉ„Å™„Åè„Å¶3Êú¨„Åß„Åô„ÄÇ„ÅÇ„Å®„ÄÅ„Éì„Éº„É´„ÅØÈ£≤„Çì„Åß„ÅÑ„Åæ„Åõ„Çì„ÄÇ", key="nut_correction_text")
                    if st.button("AI„Å´‰øÆÊ≠£„Çí‰æùÈ†º„Åô„Çã"):
                        if correction_text.strip():
                            st.session_state.nutrition_chat_history.append({"role": "user", "content": correction_text})
                            with st.spinner("AI„Åå‰øÆÊ≠£Ê°à„Çí‰ΩúÊàê‰∏≠„Åß„Åô..."):
                                new_proposal = refine_nutrition_with_ai(st.session_state.nutrition_chat_history, result)
                            
                            if new_proposal:
                                st.session_state.nutrition_chat_history.append({"role": "assistant", "content": new_proposal["response_text"]})
                                st.session_state.analysis_result = new_proposal["updated_data"]
                                st.session_state.show_nutrition_correction = False
                                st.rerun()
                            else:
                                st.error("‰øÆÊ≠£Ê°à„ÅÆ‰ΩúÊàê„Å´Â§±Êïó„Åó„Åæ„Åó„Åü„ÄÇ")
                        else:
                            st.warning("‰øÆÊ≠£ÂÜÖÂÆπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")

        st.markdown('</div>', unsafe_allow_html=True)

    # ---- List ----
    with st.container():
        st.markdown('<div class="card">', unsafe_allow_html=True)
        st.subheader("È£ü‰∫ãË®òÈå≤‰∏ÄË¶ß")
        all_records_df = get_all_records()
        if all_records_df.empty:
            st.info("„Åæ„Å†Ë®òÈå≤„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ")
        else:
            all_records_df['is_favorite'] = all_records_df['is_favorite'].astype(bool)
            
            edited_df = st.data_editor(
                all_records_df,
                column_config={
                    "id": None,
                    "date": "Êó•‰ªò",
                    "meal_type": "Á®ÆÈ°û",
                    "food_name": "ÂÜÖÂÆπ",
                    "calories": st.column_config.NumberColumn("„Ç´„É≠„É™„Éº", format="%d kcal"),
                    "protein": st.column_config.NumberColumn("P(g)", format="%.1f"),
                    "carbohydrates": st.column_config.NumberColumn("C(g)", format="%.1f"),
                    "fat": st.column_config.NumberColumn("F(g)", format="%.1f"),
                    "vitamin_d": None, "salt": None, "zinc": None, "folic_acid": None,
                    "is_favorite": st.column_config.CheckboxColumn("„Éó„É´„ÉÄ„Ç¶„É≥ÁôªÈå≤", width="small"),
                },
                use_container_width=True,
                hide_index=True,
                key="data_editor",
            )
            
            if not edited_df.equals(all_records_df):
                diff = edited_df[edited_df['is_favorite'] != all_records_df['is_favorite']]
                for index, row in diff.iterrows():
                    update_favorite_status(row['id'], row['is_favorite'])
                st.success("„ÅäÊ∞ó„Å´ÂÖ•„ÇäË®≠ÂÆö„ÇíÊõ¥Êñ∞„Åó„Åæ„Åó„Åü„ÄÇ")
                st.rerun()

        st.markdown('</div>', unsafe_allow_html=True)

elif menu == "ÈÅãÂãïË®òÈå≤":
    with st.container():
        st.markdown('<div class="card">', unsafe_allow_html=True)
        st.subheader("ÈÅãÂãï„ÅÆË®òÈå≤")
        st.caption("Êó•„ÄÖ„ÅÆÈÅãÂãï„ÇíË®òÈå≤„Åó„Å¶„ÄÅÊ¥ªÂãïÈáè„ÇíÁÆ°ÁêÜ„Åó„Åæ„Åó„Çá„ÅÜ„ÄÇ")
        
        default_exercises = ["„É®„Ç¨", "„Ç®„Ç¢„É≠„Éì„ÇØ„Çπ", "Group Centergy"]
        try:
            past_exercises = get_unique_exercise_names()
            exercise_options = sorted(list(set(default_exercises + past_exercises)))
        except Exception:
            exercise_options = default_exercises
        exercise_options.append("„Åù„ÅÆ‰ªñÔºàËá™Áî±ÂÖ•ÂäõÔºâ")

        selected_exercise = st.selectbox(
            "ÈÅãÂãï„É°„Éã„É•„Éº",
            exercise_options
        )

        if selected_exercise != "„Åù„ÅÆ‰ªñÔºàËá™Áî±ÂÖ•ÂäõÔºâ":
            with st.form(key="exercise_form_select", clear_on_submit=True):
                duration = st.number_input("ÈÅãÂãïÊôÇÈñìÔºàÂàÜÔºâ", min_value=0, value=60, step=5)
                record_date_ex = st.date_input("Êó•‰ªò", datetime.date.today())
                if st.form_submit_button("ÈÅãÂãï„ÇíË®òÈå≤„Åô„Çã", use_container_width=True, type="primary"):
                    if duration > 0:
                        add_exercise_record(record_date_ex, selected_exercise, duration)
                        st.success(f"{selected_exercise} ({duration}ÂàÜ) „ÇíË®òÈå≤„Åó„Åæ„Åó„ÅüÔºÅ")
                    else:
                        st.warning("ÈÅãÂãïÊôÇÈñì„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
        else:
            st.info("ÂÆüÊñΩ„Åó„ÅüÈÅãÂãïÂÜÖÂÆπ„Å®ÊôÇÈñì„ÇíËá™Áî±„Å´ÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇAI„ÅåÂÜÖÂÆπ„ÇíÊï¥ÁêÜ„Åó„Åæ„Åô„ÄÇ")
            free_text_exercise = st.text_area("ÈÅãÂãïÂÜÖÂÆπ„Å®ÊôÇÈñì", placeholder="‰æãÔºö„Ç∏„É†„ÅßÁ≠ã„Éà„É¨„Çí60ÂàÜ„ÄÅ„Åù„ÅÆ„ÅÇ„Å®„É©„É≥„Éã„É≥„Ç∞„Çí30ÂàÜ")
            record_date_ex = st.date_input("Êó•‰ªò", datetime.date.today())
            
            if st.button("ÂÜÖÂÆπ„ÇíÊï¥ÁêÜ„Åó„Å¶Á¢∫Ë™ç", use_container_width=True):
                if free_text_exercise.strip():
                    with st.spinner("AI„ÅåÂÜÖÂÆπ„ÇíËß£Êûê‰∏≠..."):
                        parsed_exercise = parse_exercise_from_text(free_text_exercise)
                    if parsed_exercise:
                        st.session_state.exercise_proposal = parsed_exercise
                        st.session_state.record_date_ex = record_date_ex # Êó•‰ªò„Çí‰øùÂ≠ò
                    else:
                        st.error("ÂÜÖÂÆπ„ÇíËß£Êûê„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ„ÇÇ„ÅÜÂ∞ë„ÅóÂÖ∑‰ΩìÁöÑ„Å´Ë®òËø∞„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
                else:
                    st.warning("ÈÅãÂãïÂÜÖÂÆπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")

            if "exercise_proposal" in st.session_state:
                proposal = st.session_state.exercise_proposal
                st.write("---")
                st.write(f"AI„ÅØ‰ª•‰∏ã„ÅÆÂÜÖÂÆπ„Å®Ëß£Èáà„Åó„Åæ„Åó„Åü„ÄÇ„Åì„ÅÆÂÜÖÂÆπ„ÅßË®òÈå≤„Åó„Åæ„Åô„ÅãÔºü")
                st.markdown(f"**ÈÅãÂãïÂÜÖÂÆπ:** `{proposal['name']}`")
                st.markdown(f"**ÈÅãÂãïÊôÇÈñì:** `{proposal['duration']}` ÂàÜ")

                col1, col2, col_spacer = st.columns([1,1,2])
                if col1.button("„ÅØ„ÅÑ„ÄÅ„Åì„ÅÆÂÜÖÂÆπ„ÅßË®òÈå≤„Åô„Çã", type="primary"):
                    record_date_to_save = st.session_state.get('record_date_ex', datetime.date.today())
                    add_exercise_record(record_date_to_save, proposal['name'], proposal['duration'])
                    st.success(f"{proposal['name']} ({proposal['duration']}ÂàÜ) „ÇíË®òÈå≤„Åó„Åæ„Åó„ÅüÔºÅ")
                    # „Çª„ÉÉ„Ç∑„Éß„É≥„Çπ„ÉÜ„Éº„Éà„Çí„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
                    for key in list(st.session_state.keys()):
                        if key.startswith('exercise_') or key == 'record_date_ex':
                            del st.session_state[key]
                    st.rerun()

                if col2.button("‰øÆÊ≠£„Åô„Çã"):
                    st.session_state.show_exercise_correction = True
                
                if st.session_state.get("show_exercise_correction"):
                    correction_text = st.text_area("‰øÆÊ≠£ÁÇπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ", placeholder="ÊôÇÈñì„Çí90ÂàÜ„Å´Â§âÊõ¥„Åó„Å¶", key="ex_correction_text")
                    if st.button("‰øÆÊ≠£„ÇíÂèçÊò†"):
                        with st.spinner("AI„Åå‰øÆÊ≠£Ê°à„Çí‰ΩúÊàê‰∏≠..."):
                            new_proposal = correct_exercise_from_text(proposal, correction_text)
                        if new_proposal:
                            st.session_state.exercise_proposal = new_proposal
                            st.session_state.show_exercise_correction = False
                            st.rerun()
                        else:
                            st.error("‰øÆÊ≠£ÂÜÖÂÆπ„ÇíËß£Êûê„Åß„Åç„Åæ„Åõ„Çì„Åß„Åó„Åü„ÄÇ")

        st.markdown('</div>', unsafe_allow_html=True)
        
    with st.container():
        st.markdown('<div class="card">', unsafe_allow_html=True)
        st.subheader("ÈÅãÂãïË®òÈå≤‰∏ÄË¶ß")
        all_exercise_df = get_all_exercise_records()
        if all_exercise_df.empty:
            st.info("„Åæ„Å†ÈÅãÂãï„ÅÆË®òÈå≤„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ")
        else:
            display_ex_df = all_exercise_df.copy()
            display_ex_df["ÂâäÈô§"] = [False] * len(display_ex_df)
            
            edited_ex_df = st.data_editor(
                display_ex_df[["date", "exercise_name", "duration_minutes", "ÂâäÈô§"]],
                column_config={
                    "date": "Êó•‰ªò",
                    "exercise_name": "ÈÅãÂãïÂÜÖÂÆπ",
                    "duration_minutes": "ÊôÇÈñì(ÂàÜ)",
                    "ÂâäÈô§": st.column_config.CheckboxColumn("ÂâäÈô§Ôºü"),
                },
                use_container_width=True,
                hide_index=True,
                key="ex_data_editor",
            )

            if edited_ex_df["ÂâäÈô§"].any():
                btn_col1, btn_col2 = st.columns([1, 3])
                with btn_col1:
                    if st.container().button("ÈÅ∏Êäû„Åó„ÅüË®òÈå≤„ÇíÂâäÈô§", type="primary", use_container_width=True, key="delete_ex"):
                        ids_to_delete = edited_ex_df[edited_ex_df["ÂâäÈô§"]].index
                        original_ids = all_exercise_df.loc[ids_to_delete, "id"]
                        for rid in original_ids:
                            delete_exercise_record(int(rid))
                        st.success("ÈÅ∏Êäû„Åó„ÅüË®òÈå≤„ÇíÂâäÈô§„Åó„Åæ„Åó„Åü„ÄÇ")
                        st.rerun()
        st.markdown('</div>', unsafe_allow_html=True)

# =============================
# ADVICE
# =============================
elif menu == "Áõ∏Ë´á„Åô„Çã":
    with st.container():
        st.markdown('<div class="card">', unsafe_allow_html=True)
        st.subheader("AI„Å´Áõ∏Ë´á„Åô„Çã")

        all_records_df = get_all_records()
        all_exercise_df = get_all_exercise_records()

        if all_records_df.empty and all_exercise_df.empty:
            st.warning("„Ç¢„Éâ„Éê„Ç§„Çπ„Å´„ÅØÊúÄ‰Ωé1‰ª∂„ÅÆË®òÈå≤„ÅåÂøÖË¶Å„Åß„Åô„ÄÇ„Åæ„Åö„ÅØÈ£ü‰∫ã„ÅãÈÅãÂãï„ÇíË®òÈå≤„Åó„Å¶„Åø„Åæ„Åó„Çá„ÅÜ„ÄÇ")
            st.stop()

        user_profile = (
            """
            - Âπ¥ÈΩ¢: 35Ê≠≥Â•≥ÊÄß
            - Ë∫´Èï∑: 153cm
            - ‰ΩìÈáç: 50kg
            - ÊÇ©„Åø: Áó©„Åõ„Å´„Åè„ÅèÂ§™„Çä„ÇÑ„Åô„ÅÑ(Áâπ„Å´„ÄÅ„ÅäËÖπ„Åæ„Çè„Çä„Å®È°é)„ÄÇÁ≠ãËÇâÈáè„ÅåÂ∞ë„Å™„Åè„ÄÅ‰∏ãÂçäË∫´‰∏≠ÂøÉ„Å´Á≠ãËÇâ„Çí„Å§„Åë„Åü„ÅÑ„ÄÇ
            - Â∏åÊúõ: „Ç¢„É≥„ÉÅ„Ç®„Ç§„Ç∏„É≥„Ç∞
            - Ëã¶Êâã„Å™È£ü„ÅπÁâ©: Áîü„ÅÆ„Éà„Éû„Éà„ÄÅÁ¥çË±Ü
            - ÈÅãÂãïË£úË∂≥: Group Centergy„ÅØ„É®„Ç¨„ÇÑ„Éî„É©„ÉÜ„Ç£„Çπ„Çí„Éô„Éº„Çπ„Å´„Åó„Åü‰∏ãÂçäË∫´„ÅÆÁ≠ãÂäõÂº∑Âåñ„Å´ÂäπÊûúÁöÑ„Å™„Éó„É≠„Ç∞„É©„É†„ÄÇ
            """
        )
        prompt_qna = f"""
„ÅÇ„Å™„Åü„ÅØÁµåÈ®ìË±äÂØå„Å™È£üÁîüÊ¥ª„Å®ÈÅãÂãï„ÅÆ„Éë„Éº„ÇΩ„Éä„É´„Ç¢„Éâ„Éê„Ç§„Ç∂„Éº„Åß„Åô„ÄÇ„É¶„Éº„Ç∂„Éº„ÅÆÂïè„ÅÑ„Å´ÂØæ„Åó„Å¶„ÅÆ„ÅøÁ∞°ÊΩî„Å´ÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
Âá∫Âäõ„É´„Éº„É´:
- Êå®Êã∂„ÉªÂ∞éÂÖ•„ÉªÁ∑†„ÇÅ„ÅÆÂÆöÂûãÊñá„ÅØ‰∏çË¶Å
- Âπ¥ÈΩ¢„ÉªÊÄßÂà•„Å™„Å©„ÅÆÂëºÁß∞„ÇíÊú¨Êñá„Å´Âê´„ÇÅ„Å™„ÅÑ
- ÂõûÁ≠î„ÅØÂøÖË¶Å„Å™Ë¶ÅÁÇπ„ÅÆ„ÅøÔºàÊúÄÂ§ß5È†ÖÁõÆ„ÅÆÁÆáÊù°Êõ∏„Åç‰∏≠ÂøÉÔºâ
- Ë®òÈå≤„Å´Âü∫„Å•„ÅèÂºïÁî®„ÅØÊúÄÂ∞èÈôê„ÅÆÊï∞ÂÄ§„ÅÆ„Åø

ÂèÇËÄÉÊÉÖÂ†±ÔºàÂá∫Âäõ„Å´Âê´„ÇÅ„Å™„ÅÑÔºâ:
{user_profile}
"""
        prompt_full = f"""
„ÅÇ„Å™„Åü„ÅØÁµåÈ®ìË±äÂØå„Å™È£üÁîüÊ¥ª„Å®ÈÅãÂãï„ÅÆ„Éë„Éº„ÇΩ„Éä„É´„Ç¢„Éâ„Éê„Ç§„Ç∂„Éº„Åß„Åô„ÄÇ‰ª•‰∏ã„ÅÆ„É¶„Éº„Ç∂„ÉºÊÉÖÂ†±„Å®Ë®òÈå≤„Å´Âü∫„Å•„Åç„ÄÅ**ÂåÖÊã¨ÁöÑ„Å™ÂàÜÊûê„É¨„Éù„Éº„Éà**„ÇíÊó•Êú¨Ë™û„Åß‰ΩúÊàê„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
Âá∫Âäõ„ÅØMarkdown„Åß„ÄÅÊ¨°„ÅÆÊßãÊàê„ÇíÂøÖ„ÅöÂê´„ÇÅ„Å¶„Åè„Å†„Åï„ÅÑ:
## Ê¶ÇË¶Å
## ËâØ„Åã„Å£„ÅüÁÇπÔºàÈ£ü‰∫ã„ÉªÈÅãÂãïÔºâ
## ÊîπÂñÑ„Éù„Ç§„É≥„ÉàÔºàÈ£ü‰∫ã„ÉªÈÅãÂãïÔºâ
## Ê†ÑÈ§ä„ÉªÊëÇÂèñÂÇæÂêë
## ÈÅãÂãï„ÅÆÂÇæÂêëÔºàÈ†ªÂ∫¶„ÉªÊôÇÈñìÔºâ
## ÂÖ∑‰ΩìÁöÑ„Ç¢„ÇØ„Ç∑„Éß„É≥„Éó„É©„É≥ÔºàÈ£ü‰∫ã„Å®ÈÅãÂãï„ÅÆÁµÑ„ÅøÂêà„Çè„ÅõÊèêÊ°àÔºâ
## Ê¨°„ÅÆ7Êó•Èñì„ÅÆÁõÆÊ®ô
Ê≥®ÊÑè: Êå®Êã∂„ÇÑÂëºÁß∞„ÅØ‰∏çË¶Å„ÄÇÂøÖË¶Å„Å™Êï∞ÂÄ§„ÅÆ„ÅøÁ∞°ÊΩî„Å´ÂºïÁî®„ÄÇ

ÂèÇËÄÉÊÉÖÂ†±ÔºàÂá∫Âäõ„Å´Âê´„ÇÅ„Å™„ÅÑÔºâ:
{user_profile}
"""

        prompt_to_send = ""

        tab1, tab2, tab3 = st.tabs(["‚úçÔ∏è „ÉÜ„Ç≠„Çπ„Éà„ÅßÁõ∏Ë´á", "üìä ÂÖ®Ë®òÈå≤„Åã„ÇâÂàÜÊûê", "üóìÔ∏è ÊúüÈñì„ÅßÂàÜÊûê"])

        with tab1:
            question = st.text_area("Áõ∏Ë´áÂÜÖÂÆπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ", height=150, placeholder="‰æãÔºöÊúÄËøëÁñ≤„Çå„ÇÑ„Åô„ÅÑ„ÅÆ„Åß„Åô„Åå„ÄÅÈ£ü‰∫ã„ÇÑÈÅãÂãï„ÅßÊîπÂñÑ„Åß„Åç„Åæ„Åô„ÅãÔºü")
            if st.button("AI„Å´Áõ∏Ë´á„Åô„Çã", key="text_consult"):
                if question:
                    record_history = all_records_df.head(30).to_string(index=False)
                    exercise_history = all_exercise_df.head(15).to_string(index=False)
                    prompt_to_send = f"""{prompt_qna}# È£ü‰∫ãË®òÈå≤ÔºàÂèÇËÄÉÔºâ
{record_history}
# ÈÅãÂãïË®òÈå≤ÔºàÂèÇËÄÉÔºâ
{exercise_history}

# Áõ∏Ë´áÂÜÖÂÆπ
{question}

‰∏äË®òÁõ∏Ë´áÂÜÖÂÆπ„Å´ÂØæ„Åó„Å¶„ÄÅË®òÈå≤„ÇíÂèÇËÄÉ„Å´„Åó„Å§„Å§ÂõûÁ≠î„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
"""
                else:
                    st.warning("Áõ∏Ë´áÂÜÖÂÆπ„ÇíÂÖ•Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")

        with tab2:
            st.info("‰ªä„Åæ„Åß„ÅÆÂÖ®„Å¶„ÅÆË®òÈå≤„ÇíÁ∑èÂêàÁöÑ„Å´ÂàÜÊûê„Åó„ÄÅ„Ç¢„Éâ„Éê„Ç§„Çπ„Çí„Åó„Åæ„Åô„ÄÇ")
            if st.button("„Ç¢„Éâ„Éê„Ç§„Çπ„Çí„ÇÇ„Çâ„ÅÜ", key="all_consult"):
                record_history = all_records_df.to_string(index=False)
                exercise_history = all_exercise_df.to_string(index=False)
                prompt_to_send = f"""{prompt_full}# ÂÖ®„Å¶„ÅÆÈ£ü‰∫ãË®òÈå≤
{record_history}
# ÂÖ®„Å¶„ÅÆÈÅãÂãïË®òÈå≤
{exercise_history}

Ë®òÈå≤„Éá„Éº„Çø„Å´Âç≥„Åó„ÅüÁ∂≤ÁæÖÁöÑ„Å™ÂàÜÊûê„É¨„Éù„Éº„Éà„ÇíÂá∫Âäõ„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
"""

        with tab3:
            today = datetime.date.today()
            one_week_ago = today - datetime.timedelta(days=7)
            cols = st.columns(2)
            start_date = cols[0].date_input("ÈñãÂßãÊó•", one_week_ago)
            end_date = cols[1].date_input("ÁµÇ‰∫ÜÊó•", today)
            if st.button("ÊåáÂÆöÊúüÈñì„ÅÆ„Ç¢„Éâ„Éê„Ç§„Çπ„Çí„ÇÇ„Çâ„ÅÜ", key="period_consult"):
                if start_date > end_date:
                    st.error("ÁµÇ‰∫ÜÊó•„ÅØÈñãÂßãÊó•‰ª•Èôç„Å´Ë®≠ÂÆö„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ")
                else:
                    period_records_df = get_records_by_period(start_date, end_date)
                    period_exercise_df = get_all_exercise_records() # Simple filter for now
                    period_exercise_df['date'] = pd.to_datetime(period_exercise_df['date'])
                    period_exercise_df = period_exercise_df[(period_exercise_df['date'] >= pd.to_datetime(start_date)) & (period_exercise_df['date'] <= pd.to_datetime(end_date))]
                    
                    if period_records_df.empty and period_exercise_df.empty:
                        st.warning("ÊåáÂÆö„Åï„Çå„ÅüÊúüÈñì„Å´Ë®òÈå≤„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ")
                    else:
                        record_history = period_records_df.to_string(index=False)
                        exercise_history = period_exercise_df.to_string(index=False)
                        prompt_to_send = f"""{prompt_full}# È£ü‰∫ãË®òÈå≤ ({start_date} ~ {end_date})
{record_history}
# ÈÅãÂãïË®òÈå≤ ({start_date} ~ {end_date})
{exercise_history}

‰∏äË®ò„ÅÆÊåáÂÆöÊúüÈñì„ÅÆË®òÈå≤„ÇíË©ï‰æ°„Åó„ÄÅ„Ç¢„Éâ„Éê„Ç§„Çπ„Çí„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ
"""

        if prompt_to_send:
            with st.spinner("AI„Åå„Ç¢„Éâ„Éê„Ç§„Çπ„ÇíÁîüÊàê‰∏≠„Åß„Åô..."):
                advice = get_advice_from_gemini(prompt_to_send)
                with st.chat_message("ai", avatar="üí¨"):
                    st.markdown(advice)
        st.markdown('</div>', unsafe_allow_html=True)
